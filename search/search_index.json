{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"ComposePreferences <p>This library offers you preference screens for compose including the ability of endless nesting subscreens as well as simple integration of custom preferences.</p>"},{"location":"#features","title":"Features","text":"<p>Info</p> <p>All features are splitted into separate modules, just include the modules you want to use!</p>"},{"location":"#screenshots","title":"Screenshots","text":"Overview Examples Input Number Boolean Button Color Date Time List"},{"location":"#supported-platforms","title":"Supported Platforms","text":"<p>This is a KMP (kotlin multiplatform) library and the provided modules do support following platforms.</p> Module android ios windows wasm Info Core <code>core</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  Modules <code>screen-bool</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>screen-button</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>screen-color</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>screen-date</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>screen-input</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>screen-list</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>screen-number</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  <code>screen-time</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714                  Extensions <code>kotpreferences</code>                    \u2714                                     \u2714                                     \u2714                                     \u2714"},{"location":"#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"compatibility/","title":"Compatibility","text":"<p>Information about the compatibility of this library with all my other libraries can be found here.</p>"},{"location":"dependencies/","title":"Dependencies","text":""},{"location":"dependencies/#compose","title":"Compose","text":"Dependency Version Infos Jetbrains Compose Multiplatform <code>1.8.2</code> Depends on jetpack (androidx) compose <code>1.8.2</code> Jetbrains Material 3 <code>1.8.2</code> Depends on jetpack (androidx) material3 <code>1.3.2</code> <p>More details about the jetpack dependencies can be found in JetBrains Release Notes.</p> <p>Warning</p> <p>I try to use as few experimental APIs as possible, but this library does use a few experimental APIs which are still marked as experimental. I will provide new versions as soon as possible if experimental APIs change or become stable.</p>"},{"location":"dependencies/#modules","title":"Modules","text":"Module Dependency Version Core <code>core</code> ComposeDialogs <code>3.0.0</code> Modules <code>screen-bool</code> - <code>screen-button</code> - <code>screen-color</code> - <code>screen-date</code> - <code>screen-input</code> - <code>screen-list</code> - <code>screen-number</code> - <code>screen-time</code> - Extensions <code>kotpreferences</code> -"},{"location":"me/","title":"About Me","text":""},{"location":"me/#about-me","title":"About Me","text":"<p>Check out my main homepage to get an impression of what I do and my open source libraries, android apps and garmin watchfaces that I've developed.</p> <p>https://mflisar.github.io/</p>"},{"location":"other-libraries/","title":"Other Libraries","text":""},{"location":"other-libraries/#other-libraries","title":"Other Libraries","text":"<p>Here you can find an overview of my main libraries that do all play well together including some short descriptions.</p> Utilities Library Description CacheFileProvider This is a minimal library with a few lines of code and without dependencies that offers a simple file provider (simple read only access for sharing files with other apps). FeedbackManager This is a very small library that allows you to send feedback from an app without internet permission via email, either directly or via an unintrusive notification. Libraries Library Description KotBilling A kotlin coroutine based solution for handling in app purchases for billing library version 7. KotPreferences With this library you can declare preferences via kotlin delegates and observe and update them via kotlin flows. This works with any storage implementation, an implementation for JetPack DataStore is provided already. Lumberjack This is a full logging library with a build in way to log to console, file or any custom place as well as optional extensions to send a log file via mail or show it on the device. Compose Image Library Description ComposeChangelog This library offers you a a changelog dialog for compose including the ability to show new logs on app start only as well as filtering and customisation. ComposeColors A simple collection of colors that can be used inside any KMP compose project. ComposeDebugDrawer This library offers you a simple and easily extendable debug drawer. ComposeDialogs A compose framework for modal dialogs. ComposeThemer This is a full compose theme engine that handles applying a theme as well as updating the system ui elements. Extendible and allows to simply apply user selected themes inside your app. Unofficial Projects Library Description kmp-parcelize a kmp parcelize library that allows you to use the `@Parcelize` annotation in your kmp projects kmp-library a collection of gradle plugins for my demo projects as well as for my own apps kmp-democomposables a collection of composables that I use for my demo projects Toolbox My personal toolbox library"},{"location":"setup/","title":"Setup","text":"<p>This library is distributed via maven central.</p> <p>Add dependencies like following to use this library inside your project.</p> DependenciesVersion Catalog <p>Simply add the dependencies inside your <code>build.gradle.kts</code> file.</p> build.gradle.kts<pre><code>val composepreferences = \"&lt;LATEST-VERSION&gt;\"\n\n// core\nimplementation(\"io.github.mflisar.composepreferences:core:$composepreferences\")\n\n// modules\nimplementation(\"io.github.mflisar.composepreferences:screen-bool:$composepreferences\")\nimplementation(\"io.github.mflisar.composepreferences:screen-button:$composepreferences\")\nimplementation(\"io.github.mflisar.composepreferences:screen-color:$composepreferences\")\nimplementation(\"io.github.mflisar.composepreferences:screen-date:$composepreferences\")\nimplementation(\"io.github.mflisar.composepreferences:screen-input:$composepreferences\")\nimplementation(\"io.github.mflisar.composepreferences:screen-list:$composepreferences\")\nimplementation(\"io.github.mflisar.composepreferences:screen-number:$composepreferences\")\nimplementation(\"io.github.mflisar.composepreferences:screen-time:$composepreferences\")\n\n// extensions\nimplementation(\"io.github.mflisar.composepreferences:kotpreferences:$composepreferences\")\n</code></pre> <p>Define the dependencies inside your <code>libs.versions.toml</code> file.</p> libs.versions.toml<pre><code>[versions]\n\ncomposepreferences = \"&lt;LATEST-VERSION&gt;\"\n\n[libraries]\n\n# core\ncomposepreferences-core = { module = \"io.github.mflisar.composepreferences:core\", version.ref = \"composepreferences\" }\n\n# modules\ncomposepreferences-screen-bool = { module = \"io.github.mflisar.composepreferences:screen-bool\", version.ref = \"composepreferences\" }\ncomposepreferences-screen-button = { module = \"io.github.mflisar.composepreferences:screen-button\", version.ref = \"composepreferences\" }\ncomposepreferences-screen-color = { module = \"io.github.mflisar.composepreferences:screen-color\", version.ref = \"composepreferences\" }\ncomposepreferences-screen-date = { module = \"io.github.mflisar.composepreferences:screen-date\", version.ref = \"composepreferences\" }\ncomposepreferences-screen-input = { module = \"io.github.mflisar.composepreferences:screen-input\", version.ref = \"composepreferences\" }\ncomposepreferences-screen-list = { module = \"io.github.mflisar.composepreferences:screen-list\", version.ref = \"composepreferences\" }\ncomposepreferences-screen-number = { module = \"io.github.mflisar.composepreferences:screen-number\", version.ref = \"composepreferences\" }\ncomposepreferences-screen-time = { module = \"io.github.mflisar.composepreferences:screen-time\", version.ref = \"composepreferences\" }\n\n# extensions\ncomposepreferences-kotpreferences = { module = \"io.github.mflisar.composepreferences:kotpreferences\", version.ref = \"composepreferences\" }\n</code></pre> <p>And then use the definitions in your projects like following:</p> build.gradle.kts<pre><code># core\nimplementation(libs.composepreferences.core)\n\n# modules\nimplementation(libs.composepreferences.screen.bool)\nimplementation(libs.composepreferences.screen.button)\nimplementation(libs.composepreferences.screen.color)\nimplementation(libs.composepreferences.screen.date)\nimplementation(libs.composepreferences.screen.input)\nimplementation(libs.composepreferences.screen.list)\nimplementation(libs.composepreferences.screen.number)\nimplementation(libs.composepreferences.screen.time)\n\n# extensions\nimplementation(libs.composepreferences.kotpreferences)\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#basic-example","title":"Basic example","text":"<pre><code>// select a style for your preferences\nval style = DefaultStyle.create()\nval modernStyle = ModernStyle.create()\n\n// create a preference settings instance (you can adjust a few additional settings here)\nval settings = PreferenceSettingsDefaults.settings(\n    style = style\n)\n\n// create a state for the preference screen (this is optional - only needed if you need access to informations from this state)\nval state = rememberPreferenceState()\n\n// create a preference screen\nPreferenceScreen(\n    modifier = Modifier,\n    settings = settings,\n    state = state\n) {\n    // preference items\n    // ...\n}\n</code></pre>"},{"location":"usage/#preference-items","title":"Preference items","text":"<p>Check out the modules region in the menu on the left to find out more about the different preference items.</p> <p>Here's a very basic example to show you how the preference items are used inside the <code>PreferenceScreen</code>:</p> <pre><code>PreferenceScreen(\n    // ...\n) {\n    PreferenceSection(\n        title = \"Section 1\"\n    ) {\n        PreferenceInfo(\n            title = \"Info 1\"\n        )\n        val checked = remember { mutableStateOf(false) }\n        PreferenceBool(\n            value = checked,\n            title = \"Boolean Preference\"\n        )\n        val input =  remember { mutableStateOf(\"\") }\n        PreferenceInputText(\n            value = input,\n            title = \"Input Preference\"\n        )\n    }\n    PreferenceSection(\n        title = \"Section 2\"\n    ) {\n        PreferenceInfo(\n            title = \"Info 2\"\n        )\n    }\n}\n</code></pre>"},{"location":"advanced/custom-preferences/","title":"Custom Preferences","text":"<p>You have 2 options to define custom preferences. If possible, prefer the first one as it will apply all the styling for you.</p>"},{"location":"advanced/custom-preferences/#option-1-use-the-basepreference-composable","title":"Option 1: Use the <code>BasePreference</code> composable","text":"<pre><code>BasePreference(\n    title = \"A custom preference\",\n    subtitle = \"Showing an icon button\",\n    icon = { Icon(Icons.Default.Android, null) }\n) {\n    IconButton(onClick = {\n        showInfo(\"IconButton clicked\")\n    }) {\n        Icon(Icons.Default.Android, null)\n    }\n}\n</code></pre>"},{"location":"advanced/custom-preferences/#option-2-use-the-basepreferencecontainer-composable","title":"Option 2: Use the <code>BasePreferenceContainer</code> composable","text":"<p>Info</p> <p>In this case you have to apply the styling yourself - just the most basic stuff is done for you!</p> <pre><code>BasePreferenceContainer(\n    modifier = Modifier.padding(16.dp)\n) { modifier -&gt;\n    // you should use the modifier, it handles enabled/disabled state + shaping + animation\n    Column(modifier) {\n        Text(\"A custom preference\", fontWeight = FontWeight.Bold, color = Color.Red)\n        Text(\"Holding a completely customised layout...\")\n    }\n}\n</code></pre>"},{"location":"advanced/dependencies/","title":"Dependencies","text":"<p>All preferences allow you to enable/disable and show/hide them based on dependencies. This allows you to create complex preference screens with dependencies between preferences.</p>"},{"location":"advanced/dependencies/#example","title":"Example","text":"<p>Following shows a simple example where the second preference directly depends on the first preference. The dependency is used for the enabled state.</p> <pre><code>PreferenceBool(\n    style = PreferenceBool.Style.Switch,\n    value = main1.value,\n    onValueChange = {\n        scope.launch(DispatcherIO) {\n            dataStore.update(\"main1\", it)\n        }\n    },\n    title = \"1 MAIN SWITCH\",\n    subtitle = \"This switch does control the enabled states of the next 2 preferences\",\n    icon = { Icon(Icons.Default.Info, null) },\n    itemStyle = PreferenceStyleDefaults.primaryContainer()\n)\nPreferenceInfo(\n    title = \"Sub Item 1.1...\",\n    subtitle = \"Enabled if main switch is enabled\",\n    icon = { Icon(Icons.Default.Info, null) },\n    enabled = Dependency.State(main1) { it }\n)\n</code></pre> <p>Using it for the visibility state works the same way.</p> <pre><code>PreferenceInfo(\n    title = \"Sub Item 2.2...\",\n    subtitle = \"Only visible if parent switch is enabled...\",\n    icon = { Icon(Icons.Default.Info, null) },\n    visible = Dependency.State(main2) { it }\n)\n</code></pre>"},{"location":"advanced/dependencies/#depending-on-arbitrary-data","title":"Depending on arbitrary data","text":"<p>The dependency class allows you to depend on any data, you just have to convert the data to a boolean. Following shows an example where the dependency depends on an <code>Int</code> state and derives the enabled state from it.</p> <pre><code>val intDependency1 = dataStore.getInt(\"intDependency1\", 0).collectAsState(initial = 0)\nval intDependency2 = dataStore.getInt(\"intDependency2\", 0).collectAsState(initial = 0)\nPreferenceNumber(\n    style = PreferenceNumber.Style.Slider(),\n    value = intDependency2.value,\n    onValueChange = {\n        scope.launch(DispatcherIO) {\n            dataStore.update(\"intDependency2\", it)\n        }\n    },\n    min = 0,\n    max = 10,\n    stepSize = 1,\n    title = \"Sub Number 1\",\n    subtitle = \"Only enabled, if main number &gt;= 5\",\n    enabled = Dependency.State(intDependency1) {\n        it &gt;= 5\n    }\n)\n</code></pre>"},{"location":"advanced/filtering/","title":"Filtering","text":"<p>Filtering is an optional feature. It allows to filter the preferences and render the result as a flat list or just filters and still keeps the hierarchy intact.</p>"},{"location":"advanced/filtering/#setup","title":"Setup","text":"<p>You just have to define a filter mode...</p> <pre><code>val filterModes = listOf(\n    DefaultPreferenceFilter.Mode.ContainsText,\n    DefaultPreferenceFilter.Mode.AllWords(false),\n    DefaultPreferenceFilter.Mode.AnyWord(false)\n)\n</code></pre> <p>... then create a filter setup ...</p> <pre><code>val filter = rememberDefaultPreferenceFilter(\n    highlightSpan = SpanStyle(color = Color.Red),\n    mode = filterModes[0]\n)\n</code></pre> <p>... and finally pass on the filter to the screen:</p> <pre><code>PreferenceScreen(\n    modifier = Modifier.weight(1f).fillMaxWidth(),\n    settings = settings,\n    filter = filter,\n    state = state\n)\n</code></pre>"},{"location":"advanced/filtering/#filter","title":"Filter","text":"<p>Afterwards simple adjust the <code>filter.search</code> state in your <code>TextField</code> or wherever you want and the screen will automatically update the list of preferences based on your filter settings.</p> <pre><code>TextField(\n    value = filter.search.value,\n    onValueChange = { filter.search.value = it }\n)\n</code></pre>"},{"location":"advanced/filtering/#other-customisations","title":"Other customisations","text":"<p>Additionally the <code>filter</code> object does provide some states to make more adjustments if desired.</p> <pre><code>/**\n * Remember a DefaultPreferenceFilter with the given parameters.\n *\n * @param search the search string to filter by\n * @param flattenResult Whether to flatten the result of the filter\n * @param mode the mode to use for the filter\n * @param ignoreCase whether to ignore the case of the search string\n * @param highlightSpan the SpanStyle to use for highlighting the search string\n */\nclass DefaultPreferenceFilter internal constructor(\n    override val search: MutableState&lt;String&gt;,\n    override val flattenResult: MutableState&lt;Boolean&gt;,\n    val mode: MutableState&lt;Mode&gt;,\n    private val ignoreCase: MutableState&lt;Boolean&gt;,\n    private val highlightSpan: SpanStyle\n) : PreferenceFilter\n</code></pre>"},{"location":"advanced/filtering/#custom-filter","title":"Custom filter","text":"<p>If desired, you can implement a full custom implementation of the <code>PreferenceFilter</code> interface. Just check out the <code>DefaultPreferenceFilter</code> to find an example on how this is done.</p>"},{"location":"advanced/styles/","title":"Styles","text":"<p>You can apply two predefined styles with a log of customisations on top of it. <code>Default</code> and <code>Modern</code>. The modern style does group sections and also applies custom edges to the groups whereas the default style is a flat and more simply style.</p> <p>Additionally you can customise how texts are rendered as well as how the preferences are styled. Check out following for more details.</p> <p>All those customisations are supported by all preference composables.</p>"},{"location":"advanced/styles/#preferencestyle","title":"PreferenceStyle","text":"Default Modern DefaultModern <pre><code>/*\n * Creates a new DefaultStyle instance with the given parameters.\n *\n * This style does simply apply the defined styles to the items and sections.\n *\n * @param backgroundColor the background color of the preference items\n * @param foregroundColor the foreground color of the preference items (title color)\n * @param sectionBackgroundColor the background color of the preference sections\n * @param sectionForegroundColor the foreground color of the preference sections (title color)\n * @param shape the shape of the preference items\n * @param alphaVariant the alpha variant of the preference items (used for the content area and and subtitles in combination with the foreground color)\n * @param innerPadding the inner padding of the preference items\n * @param outerPadding the outer padding of the preference items\n * @param titleTextStyle the text style of the preference item titles\n * @param subtitleTextStyle the text style of the preference item subtitles\n * @param sectionTitleTextStyle the text style of the preference section titles\n * @param sectionSubtitleTextStyle the text style of the preference section subtitles\n * @param spacing the spacing between preference items\n */\n@Composable\nfun create(\n    backgroundColor: Color = MaterialTheme.colorScheme.background,\n    foregroundColor: Color = MaterialTheme.colorScheme.onBackground,\n    sectionBackgroundColor: Color = MaterialTheme.colorScheme.background,\n    sectionForegroundColor: Color = MaterialTheme.colorScheme.primary,\n    shape: Shape = LocalPreferenceSettings.current.style.defaultItemStyle.shape,\n    alphaVariant: Float = PreferenceItemDefaults.DEFAULT_ALPHA_VARIANT,\n    innerPadding: PaddingValues = PreferenceStyleDefaults.DEFAULT_INNER_PADDING,\n    outerPadding: PaddingValues = PreferenceStyleDefaults.DEFAULT_OUTER_PADDING,\n    titleTextStyle: TextStyle = MaterialTheme.typography.labelLarge,\n    subtitleTextStyle: TextStyle = MaterialTheme.typography.bodyMedium,\n    sectionTitleTextStyle: TextStyle = MaterialTheme.typography.labelLarge,\n    sectionSubtitleTextStyle: TextStyle = MaterialTheme.typography.bodyMedium,\n    spacing: Dp = 0.dp\n) : DefaultStyle\n</code></pre> <pre><code>/*\n* Creates a new ModernStyle instance with the given parameters.\n*\n* @param cornerSize the corner size for preference items (used for selector as well as for the grouping style of items inside sections)\n* @param backgroundColor the background color of the preference items\n* @param foregroundColor the foreground color of the preference items (title color)\n* @param sectionBackgroundColor the background color of the preference sections\n* @param sectionForegroundColor the foreground color of the preference sections (title color)\n* @param sectionGroupItemBackgroundColor the background color used for items inside sections\n* @param sectionGroupItemForegroundColor the foreground color used for items inside sections\n* @param alphaVariant the alpha variant of the preference items (used for the content area and and subtitles in combination with the foreground color)\n* @param innerPadding the inner padding of the preference items\n* @param outerPadding the outer padding of the preference items\n* @param titleTextStyle the text style of the preference item titles\n* @param subtitleTextStyle the text style of the preference item subtitles\n* @param sectionTitleTextStyle the text style of the preference section titles\n* @param sectionSubtitleTextStyle the text style of the preference section subtitles\n* @param spacing the spacing between preference items\n*/\n@Composable\nfun create(\n    cornerSize: Dp = DEFAULT_CORNER_SIZE,\n    backgroundColor: Color = MaterialTheme.colorScheme.background,\n    foregroundColor: Color = MaterialTheme.colorScheme.onBackground,\n    sectionBackgroundColor: Color = MaterialTheme.colorScheme.background,\n    sectionForegroundColor: Color = MaterialTheme.colorScheme.primary,\n    sectionGroupItemBackgroundColor: Color = MaterialTheme.colorScheme.surfaceContainerHighest,\n    sectionGroupItemForegroundColor: Color = MaterialTheme.colorScheme.onSurface,\n    alphaVariant: Float = PreferenceItemDefaults.DEFAULT_ALPHA_VARIANT,\n    innerPadding: PaddingValues = PreferenceStyleDefaults.DEFAULT_INNER_PADDING,\n    outerPadding: PaddingValues = DEFAULT_OUTER_PADDING,\n    titleTextStyle: TextStyle = MaterialTheme.typography.labelLarge,\n    subtitleTextStyle: TextStyle = MaterialTheme.typography.bodyMedium,\n    sectionTitleTextStyle: TextStyle = MaterialTheme.typography.labelLarge,\n    sectionSubtitleTextStyle: TextStyle = MaterialTheme.typography.bodyMedium,\n    spacing: Dp = DEFAULT_ITEM_SPACING\n) : ModernStyle\n</code></pre>"},{"location":"advanced/styles/#other-styling-options","title":"Other Styling Options","text":""},{"location":"advanced/styles/#itemstyle","title":"ItemStyle","text":"<p>You can find some <code>composable</code> functions inside <code>PreferenceStyleDefaults</code> that allow you to create a <code>PreferenceItemStyle</code> instance.</p> <p>Those functions allow you to change colors, paddings, shapes, text styles and similar.</p> <p>Following is one of those functions.</p> <pre><code>/**\n * this function returns a [PreferenceItemStyle] defining the style of a preference item\n *\n * check out the overload to find a background/foreground based function\n *\n * @param colors the [PreferenceItemColors] of this item\n * @param innerPadding the outer [PaddingValues] of this item\n * @param outerPadding the inner [PaddingValues] of this item\n * @param shape the [Shape] of this item\n * @param tonalElevation the tonal elevation of this item\n * @param shadowElevation the shadow elevation of this item\n * @param titleTextStyle the shadow elevation of this item\n * @param subtitleTextStyle the shadow elevation of this item\n *\n * @return the [PreferenceItemStyle] holding the provided setup\n */\n@Composable\nfun item(\n    colors: PreferenceItemColors = PreferenceItemDefaults.colors(),\n    innerPadding: PaddingValues = LocalPreferenceSettings.current.style.defaultItemStyle.innerPadding,\n    outerPadding: PaddingValues = LocalPreferenceSettings.current.style.defaultItemStyle.outerPadding,\n    shape: Shape = LocalPreferenceSettings.current.style.defaultItemStyle.shape,\n    tonalElevation: Dp = 0.dp,\n    shadowElevation: Dp = 0.dp,\n    titleTextStyle: TextStyle = MaterialTheme.typography.labelLarge,\n    subtitleTextStyle: TextStyle = MaterialTheme.typography.bodyMedium\n): PreferenceItemStyle\n</code></pre>"},{"location":"advanced/styles/#text-styling","title":"Text Styling","text":"<p>By default you already adjust the styles via the <code>ItemStyle</code> (<code>titleTextStyle</code> + <code>subtitleTextStyle</code>) . However, you can also adjust the text styling by providing custom <code>titleRenderer</code> and <code>subtitleRenderer</code> to all preferences.</p> <p>Those do provide an <code>AnnotatedString</code> that you can render as you like. Be awere, that this string has already applied the filter highlighting if you use filtering.</p> <p>The default renderer for all preferences look like following (they use a simple <code>Text</code> composable, the correct text styles from your <code>ItemStyle</code> are provided by <code>CompositionLocal</code> already):</p> <pre><code>titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\nsubtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) }\n</code></pre>"},{"location":"advanced/styles/#preferenceitemsetup","title":"PreferenceItemSetup","text":"<p>You can find some <code>composable</code> functions inside <code>Preference*Defaults</code> that allow you to create a <code>PreferenceItemSetup</code> instance. All preference types to provide their own default setup.</p> <p>This is some special class, it's used to internally setup a preference item and to provide user customisations. It's public because of the extendibility of this library.</p> <p>Whenever you want to customise something you should do it like following:</p> <pre><code>val setup = Preference*Defaults.itemSetup().copy(\n    // ... only customise what you want to change\n)\n</code></pre> <p>Here's the class that shows you what can be customised:</p> <pre><code>/**\n * this provides a class to define some custom setup to customise a preference item\n *\n * @param trailingContentSize the [TrailingContentSize] for a preference item\n * @param ignoreForceNoIconInset if true, the preference item will ignore the flag from [PreferenceSettings.forceNoIconInset]\n * @param minHeight the forced minimum height for the preference item\n * @param minSubTitleExtraHeight the forced minimum height addition if the preference item has a sub title\n * @param contentPlacementBottom if true, the content of this item will be place **below** the title/subtitle instead of **behind** it as trailing content\n * @param alignment the alignment of the preference item content\n * @param hideTitle if true, the title will not be displayed (allows the content to take up its place)\n * @param excludeFromSectionStyle if true, the item will not be styled as a section item and will break the section style up if it is placed in the middle of a section\n */\n@Stable\ndata class PreferenceItemSetup(\n    val trailingContentSize: TrailingContentSize = TrailingContentSize(),\n    val ignoreForceNoIconInset: Boolean = false,\n    val minHeight: Dp = 56.dp,\n    val minSubTitleExtraHeight: Dp = 16.dp,\n    val contentPlacementBottom: Boolean = false,\n    val alignment: Alignment.Vertical = Alignment.CenterVertically,\n    val hideTitle: Boolean = false,\n    val excludeFromSectionStyle: Boolean = false\n)\n</code></pre>"},{"location":"migration/v1/","title":"v1","text":"<p>Info</p> <p>Version <code>1.*</code> is a kotlin multiplatform rewrite, that's why some fundamantal changes needed to be done!</p>"},{"location":"migration/v1/#changes","title":"Changes","text":"<ul> <li><code>com.michaelflisar.composepreferences.core.hierarchy.PreferenceScope</code> =&gt; <code>com.michaelflisar.composepreferences.core.scopes.PreferenceScope</code></li> <li><code>com.michaelflisar.composepreferences.core.classes.PreferenceStyleDefaults</code> =&gt; <code>com.michaelflisar.composepreferences.core.styles.PreferenceStyleDefaults</code></li> <li><code>MutableState&lt;*&gt;.asPreferenceData()</code> was removed =&gt; use the <code>MutableState</code> directly now instead</li> </ul>"},{"location":"migration/v1/#structural-changes","title":"Structural changes","text":"<ul> <li> <p>I had to change all <code>title</code> and <code>subtitle</code> parameters from <code>Composables</code> to <code>string</code> because otherwise I could not have added the new filtering feature.</p> <pre><code>// OLD\nPreferenceBool(\n    title = { Text(\"Text\") },\n    subtitle = { Text(\"Text2\") }\n)\n\n// NEW  \nPreferenceBool(\n    title = \"Text\",\n    subtitle = \"Text\"\n)\n</code></pre> </li> <li> <p><code>PreferenceSectionHeader</code> was renamed to <code>PreferenceSection</code> and does contains its children now</p> <pre><code>// OLD\nPreferenceSectionHeader(title = \"Infos\")\nPreferenceInfo(title = \"Info 1\")\nPreferenceInfo(title = \"Info 2\")\n\n// NEW\nPreferenceSection(title = \"Infos\") {\n    PreferenceInfo(title = \"Info 1\")\n    PreferenceInfo(title = \"Info 2\")\n}\n</code></pre> </li> </ul>"},{"location":"migration/v1/#note","title":"Note","text":"<p>I probably forgot some small changes because this was a big rewrite in KMP. Let me know if you find something then I'll add it here.</p>"},{"location":"modules/core/","title":"core","text":"<p>This is the core module. It contains all the basic preference stuff like <code>styles</code>, <code>sections</code>, <code>groups</code>, <code>hierarchy management</code>, etc...</p> <p>The general usage is already described in the usage region. In the following I shortly describe how the main composables work. This module also contains all classes that are needed for advanced usage - check out the advanced section for more details.</p>"},{"location":"modules/core/#preferenceinfo","title":"PreferenceInfo","text":"<p>This shows a simple information preference.</p> <pre><code>/**\n * A info preference item\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param onLongClick a optional long click listener for this item\n */\n@Composable\nfun PreferenceScope.PreferenceInfo(\n    // Special\n    onLongClick: (() -&gt; Unit)? = null,\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceInfoDefaults.itemSetup(),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList()\n)\n</code></pre>"},{"location":"modules/core/#preferencedivider","title":"PreferenceDivider","text":"<p>This shows a simple divider preference.</p> <pre><code>/**\n * A divider preference item\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n */\n@Composable\nfun PreferenceScope.PreferenceDivider(\n    // Special\n    // Base Preference\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    filterTags: List&lt;String&gt; = emptyList()\n)\n</code></pre>"},{"location":"modules/core/#preferencesection","title":"PreferenceSection","text":"<p>This allows you to wrap a group of preferences in a section. Depending on the style this may also change the visual appearance of the preferences.</p> <pre><code>/**\n * A section preference item\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n */\n@Composable\nfun PreferenceGroupScope.PreferenceSection(\n    // Special\n    expandable: PreferenceSection.Expandable = PreferenceSection.Expandable.Disabled,\n    // Base Preference\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    title: String? = null,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultSectionItemStyle,\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    content: @Composable PreferenceSectionScope.() -&gt; Unit,\n)\n</code></pre>"},{"location":"modules/core/#preferencesubscreen","title":"PreferenceSubScreen","text":"<p>This allows you to wrap a group of preferences in a sub screen. This means, that all children will only be visible if the user clicks on the preference. This will then open the sub screen and show it's content.</p> <pre><code>/**\n * A group preference item\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n */\n@Composable\nfun PreferenceScope.PreferenceSubScreen(\n    // Special\n    // Base Preference\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    title: String,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultGroupItemStyle,\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    content: @Composable PreferenceGroupScope.() -&gt; Unit,\n)\n</code></pre>"},{"location":"modules/kotpreferences/","title":"kotpreferences","text":"<p>This extension allows to to integrate <code>KotPreferences</code> into the preferences library.</p>"},{"location":"modules/kotpreferences/#use-a-kotpreferences-preference-as-dependency","title":"Use a <code>KotPreferences</code> preference as dependency","text":"<pre><code>/**\n * simple extension function to plug in a setting as a dependency\n *\n * @param enabled convert the value to a boolean to determine if the setting is enabled\n */\n@Composable\nfun &lt;T&gt; StorageSetting&lt;T&gt;.asDependency(\n    enabled: (T) -&gt; Boolean\n): Dependency.State&lt;T&gt;\n</code></pre>"},{"location":"modules/screen-bool/","title":"screen-bool","text":"<p>This shows a simple boolean preference. It allows to toggle a boolean value.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p>"},{"location":"modules/screen-bool/#example","title":"Example","text":"<pre><code>val bool1 = dataStore.getBool(\"bool1\", true).collectAsState(initial = true)\nPreferenceBool(\n    style = PreferenceBool.Style.Switch,\n    value = bool1.value,\n    onValueChange = {\n        scope.launch(DispatcherIO) {\n            dataStore.update(\"bool1\", it)\n        }\n    },\n    title = \"Bool 1\",\n    icon = { Icon(Icons.Default.Check, null) }\n)\n</code></pre>"},{"location":"modules/screen-bool/#composable","title":"Composable","text":"Data as <code>MutableState</code>Data as <code>value</code> + <code>onValueChange</code> <pre><code>/**\n * A bool preference item - this item shows a checkbox/switch which reflects the preference state\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param style the [PreferenceBool.Style] of this item ([PreferenceBool.Style.Switch] or [PreferenceBool.Style.Checkbox])\n * @param value the [MutableState] of this item\n */\n@Composable\nfun PreferenceScope.PreferenceBool(\n    style: PreferenceBool.Style = PreferenceBool.Style.Switch,\n    // Special\n    value: MutableState&lt;Boolean&gt;,\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceBoolDefaults.itemSetup(),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList()\n)\n</code></pre> <pre><code>/**\n * A bool preference item - this item shows a checkbox/switch which reflects the preference state\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param style the [PreferenceBool.Style] of this item ([PreferenceBool.Style.Switch] or [PreferenceBool.Style.Checkbox])\n * @param value the value of this item\n * @param onValueChange the value changed callback of this item\n */\n@Composable\nfun PreferenceScope.PreferenceBool(\n    style: PreferenceBool.Style = PreferenceBool.Style.Switch,\n    // Special\n    value: Boolean,\n    onValueChange: (selected: Boolean) -&gt; Unit,\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceBoolDefaults.itemSetup(),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList()\n)\n{\n    val stateEnabled = enabled.state()\n    val onClick = if (stateEnabled.value &amp;&amp; LocalPreferenceSettings.current.toggleBooleanOnItemClick) {\n        {\n            val updated = !value\n            onValueChange(updated)\n        }\n    } else null\n\n    // Switch is larger than Checkbox and has 52x32 DP\n    BasePreference(\n        itemSetup = itemSetup,\n        enabled = enabled,\n        visible = visible,\n        title = title,\n        subtitle = subtitle,\n        icon = icon,\n        itemStyle = itemStyle,\n        titleRenderer = titleRenderer,\n        subtitleRenderer = subtitleRenderer,\n        filterTags = filterTags,\n        onClick = onClick\n    ) {\n        when (style) {\n            PreferenceBool.Style.Checkbox -&gt; {\n                Checkbox(checked = value, onCheckedChange = {\n                    onValueChange(it)\n                }, enabled = stateEnabled.value)\n            }\n\n            PreferenceBool.Style.Switch -&gt; {\n                Switch(checked = value, onCheckedChange = {\n                    onValueChange(it)\n                }, enabled = stateEnabled.value)\n            }\n        }\n    }\n}\n\n@Stable\nobject PreferenceBool {\n    enum class Style {\n        Checkbox,\n        Switch\n    }\n}\n\n@Stable\nobject PreferenceBoolDefaults {\n    @Composable\n    fun itemSetup() = PreferenceItemSetup(\n        trailingContentSize = PreferenceItemSetupDefaults.trailingContentSize(52.dp)\n    )\n}\n</code></pre>"},{"location":"modules/screen-bool/#screenshots","title":"Screenshots","text":""},{"location":"modules/screen-button/","title":"screen-button","text":"<p>This shows a simple button preference. It allows you to handle a click action.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p>"},{"location":"modules/screen-button/#example","title":"Example","text":"<pre><code>PreferenceButton(\n    title = \"Button 1\",\n    subtitle = \"Clicking this button will increase counter 1\",\n    icon = { Icon(Icons.Default.AdsClick, null) },\n    onClick = {\n        showInfo(\"Button 1 clicked!\")\n        counter1++\n    }\n)\n</code></pre>"},{"location":"modules/screen-button/#composable","title":"Composable","text":"<pre><code>/**\n * A button preference item - this item simply executes an action on click\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param onClick the click callback of this item\n */\n@Composable\nfun PreferenceScope.PreferenceButton(\n    // Special\n    onClick: (() -&gt; Unit),\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList()\n)\n{\n    BasePreference(\n        enabled = enabled,\n        visible = visible,\n        title = title,\n        subtitle = subtitle,\n        icon = icon,\n        onClick = onClick,\n        itemStyle = itemStyle,\n        titleRenderer = titleRenderer,\n        subtitleRenderer = subtitleRenderer,\n        filterTags = filterTags,\n        content = null\n    )\n}\n</code></pre>"},{"location":"modules/screen-button/#screenshots","title":"Screenshots","text":""},{"location":"modules/screen-color/","title":"screen-color","text":"<p>This shows a simple color picker preference.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p>"},{"location":"modules/screen-color/#example","title":"Example","text":"<pre><code>val color1 = dataStore.getInt(\"color1\", Color.Red.toArgb())\n    .collectAsState(initial = Color.Red.toArgb())\nPreferenceColor(\n    value = Color(color1.value),\n    onValueChange = {\n        scope.launch(DispatcherIO) {\n            dataStore.update(\"color1\", it.toArgb())\n        }\n    },\n    title = \"Color 1\",\n    subtitle = \"This preference does support ALPHA values\",\n    icon = { Icon(Icons.Default.ColorLens, null) }\n)\n</code></pre>"},{"location":"modules/screen-color/#composable","title":"Composable","text":"Data as <code>MutableState</code>Data as <code>value</code> + <code>onValueChange</code> <pre><code>/**\n * A color preference item - this item provides a color dialog to change this preference\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param value the [MutableState] of this item\n * @param alphaSupported if true, this preference does support alpha values (ARGB) otherwise it doesn't (RGB only)\n */\n@Composable\nfun PreferenceScope.PreferenceColor(\n    // Special\n    value: MutableState&lt;Color&gt;,\n    alphaSupported: Boolean = true,\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceColorDefaults.itemSetup(),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    // Dialog\n    dialog: @Composable (state: DialogState) -&gt; Unit = { dialogState -&gt;\n        PreferenceColorDefaults.dialog(dialogState, value.value, { value.value = it }, alphaSupported, title, icon)\n    }\n)\n</code></pre> <pre><code>/**\n * A color preference item - this item provides a color dialog to change this preference\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param value the color value of this item\n * @param onValueChange the value changed callback of this item\n * @param alphaSupported if true, this preference does support alpha values (ARGB) otherwise it doesn't (RGB only)\n */\n@Composable\nfun PreferenceScope.PreferenceColor(\n    // Special\n    value: Color,\n    onValueChange: (value: Color) -&gt; Unit,\n    alphaSupported: Boolean = true,\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceColorDefaults.itemSetup(),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    // Dialog\n    dialog: @Composable (state: DialogState) -&gt; Unit = { dialogState -&gt;\n        PreferenceColorDefaults.dialog(dialogState, value, onValueChange, alphaSupported, title, icon)\n    }\n)\n</code></pre>"},{"location":"modules/screen-color/#screenshots","title":"Screenshots","text":""},{"location":"modules/screen-date/","title":"screen-date","text":"<p>This shows a simple date picker preference.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p>"},{"location":"modules/screen-date/#example","title":"Example","text":"<pre><code>val now = DateTimeUtil.now().date\nval date1 = dataStore.getLong(\"date1\", now.toEpochDays())\n    .collectAsState(initial = now.toEpochDays())\nPreferenceDate(\n    value = date1.value.let { LocalDate.fromEpochDays(it) },\n    onValueChange = {\n        scope.launch(DispatcherIO) {\n            dataStore.update(\"date1\", it.toEpochDays())\n        }\n    },\n    title = \"Date 1\",\n    subtitle = \"First day of week: Monday\",\n    icon = { Icon(Icons.Default.DateRange, null) }\n)\n</code></pre>"},{"location":"modules/screen-date/#composable","title":"Composable","text":"Data as <code>MutableState</code>Data as <code>value</code> + <code>onValueChange</code> <pre><code>/**\n * A date preference item - this item provides a date dialog to change this preference\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param value the [MutableState] of this item\n * @param firstDayOfWeek the first day of the week for the underlying date dialog\n * @param formatter the formatter for the selected date\n */\n@Composable\nfun PreferenceScope.PreferenceDate(\n    // Special\n    value: MutableState&lt;LocalDate&gt;,\n    firstDayOfWeek: DayOfWeek = DayOfWeek.MONDAY,\n    formatter: (date: LocalDate) -&gt; String = {\n        // comes from the ComposeDialog library\n        defaultFormatterSelectedDate(it)\n    },\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceDateDefaults.itemSetup(),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    // Dialog\n    dialog: @Composable (state: DialogState) -&gt; Unit = { dialogState -&gt;\n        PreferenceDateDefaults.dialog(dialogState, value.value, { value.value = it }, firstDayOfWeek, formatter, title, icon)\n    }\n)\n</code></pre> <pre><code>/**\n * A date preference item - this item provides a date dialog to change this preference\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param value the value of this item\n * @param onDateChange the value changed callback of this item\n * @param firstDayOfWeek the first day of the week for the underlying date dialog\n * @param formatter the formatter for the selected date\n */\n@Composable\nfun PreferenceScope.PreferenceDate(\n    // Special\n    value: LocalDate,\n    onValueChange: (date: LocalDate) -&gt; Unit,\n    firstDayOfWeek: DayOfWeek = DayOfWeek.MONDAY,\n    formatter: (date: LocalDate) -&gt; String = {\n        // comes from the ComposeDialog library\n        defaultFormatterSelectedDate(it)\n    },\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceDateDefaults.itemSetup(),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    // Dialog\n    dialog: @Composable (state: DialogState) -&gt; Unit = { state -&gt;\n        PreferenceDateDefaults.dialog(state, value, onValueChange, firstDayOfWeek, formatter, title, icon)\n    }\n)\n</code></pre>"},{"location":"modules/screen-date/#screenshots","title":"Screenshots","text":""},{"location":"modules/screen-input/","title":"screen-input","text":"<p>This shows a simple input preference. It allows you to input a <code>string</code> or a <code>numeric</code> value.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p>"},{"location":"modules/screen-input/#example","title":"Example","text":"TextNumeric <pre><code>val input1 = dataStore.getString(\"input1\", \"Hello\")\n    .collectAsState(initial = \"Hello\")\nPreferenceInputText(\n    value = input1.value,\n    onValueChange = {\n        scope.launch(DispatcherIO) {\n            dataStore.update(\"input1\", it)\n        }\n    },\n    title = \"Input 1\",\n    subtitle = \"String input example\",\n    icon = { Icon(Icons.AutoMirrored.Filled.TextSnippet, null) }\n)\n</code></pre> <pre><code>val input2 = dataStore.getInt(\"input2\", 100)\n    .collectAsState(initial = 100)\nPreferenceInputNumber(\n    value = input2.value,\n    onValueChange = {\n        scope.launch(DispatcherIO) {\n            dataStore.update(\"input2\", it)\n        }\n    },\n    title = \"Input 2\",\n    subtitle = \"This input preference does only accept valid Int numbers\",\n    icon = { Icon(Icons.Default.Numbers, null) }\n)\n</code></pre>"},{"location":"modules/screen-input/#composable-text","title":"Composable Text","text":"Data as <code>MutableState</code>Data as <code>value</code> + <code>onValueChange</code> <pre><code>/**\n * A text preference item - this item provides a text input dialog to change this preference\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param value the [MutableState] of this item\n * @param validator the [DialogInputValidator] of this item\n */\n@Composable\nfun PreferenceScope.PreferenceInputText(\n    // Special\n    value: MutableState&lt;String&gt;,\n    validator: DialogInputValidator = rememberDialogInputValidator(),\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceInputTextDefaults.itemSetup(),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    // Dialog\n    dialog: @Composable (state: DialogState) -&gt; Unit = { dialogState -&gt;\n        PreferenceInputTextDefaults.dialog(dialogState, value.value, { value.value = it }, validator, title, icon)\n    }\n)\n</code></pre> <pre><code>/**\n * A text preference item - this item provides a text input dialog to change this preference\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param value the value of this item\n * @param onValueChange the value changed callback of this item\n * @param validator the [DialogInputValidator] of this item\n */\n@Composable\nfun PreferenceScope.PreferenceInputText(\n    // Special\n    value: String,\n    onValueChange: (value: String) -&gt; Unit,\n    validator: DialogInputValidator = rememberDialogInputValidator(),\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceInputTextDefaults.itemSetup(),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    // Dialog\n    dialog: @Composable (state: DialogState) -&gt; Unit = { dialogState -&gt;\n        PreferenceInputTextDefaults.dialog(dialogState, value, onValueChange, validator, title, icon)\n    }\n)\n</code></pre>"},{"location":"modules/screen-input/#composable-numeric","title":"Composable Numeric","text":"Data as <code>MutableState</code>Data as <code>value</code> + <code>onValueChange</code> <pre><code>/**\n * A number input preference item - this item provides a input dialog to change this preference\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param value the [MutableState] of this item\n * @param validator the [DialogInputValidator] of this item\n * @param formatter the formatter of this item\n */\n@Composable\nfun &lt;T : Number&gt; PreferenceScope.PreferenceInputNumber(\n    // Special\n    value: MutableState&lt;T&gt;,\n    validator: DialogInputValidator = DialogInputNumber.rememberDefaultValidator(value.value),\n    formatter: (value: T) -&gt; String = { it.toString() },\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceInputNumberDefaults.itemSetup(),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    // Dialog\n    dialog: @Composable (state: DialogState) -&gt; Unit = { dialogState -&gt;\n        PreferenceInputNumberDefaults.dialog(dialogState, value.value, { value.value = it }, validator, title, icon)\n    }\n)\n</code></pre> <pre><code>/**\n * A number input preference item - this item provides a input dialog to change this preference\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param value the value of this item\n * @param onValueChange the value changed callback of this item\n * @param validator the [DialogInputValidator] of this item\n * @param formatter the formatter of this item\n */\n@Composable\nfun &lt;T : Number&gt; PreferenceScope.PreferenceInputNumber(\n    // Special\n    value: T,\n    onValueChange: (value: T) -&gt; Unit,\n    validator: DialogInputValidator = DialogInputNumber.rememberDefaultValidator(value),\n    formatter: (value: T) -&gt; String = { it.toString() },\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceInputNumberDefaults.itemSetup(),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    // Dialog\n    dialog: @Composable (state: DialogState) -&gt; Unit = { dialogState -&gt;\n        PreferenceInputNumberDefaults.dialog(dialogState, value, onValueChange, validator, title, icon)\n    }\n)\n</code></pre>"},{"location":"modules/screen-input/#screenshots","title":"Screenshots","text":""},{"location":"modules/screen-list/","title":"screen-list","text":"<p>This shows a simple list preference. It allows to select one or multiple items from a list.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p>"},{"location":"modules/screen-list/#example","title":"Example","text":"Single SelectionMulti Selection <pre><code>val list1 = dataStore.getInt(\"list1\", 0)\n    .collectAsState(initial = 0)\nPreferenceList(\n    style = PreferenceList.Style.Dialog(),\n    value = list1.value,\n    onValueChange = {\n        scope.launch(DispatcherIO) {\n            dataStore.update(\"list1\", it)\n        }\n    },\n    items = list,\n    itemTextProvider = { icons[it].name },\n    title = \"List 1 (Dialog)\",\n    icon = { Icon(Icons.AutoMirrored.Filled.List, null) }\n)\n</code></pre> <pre><code>val multiList1 = dataStore.getIntList(\"multiList1\", emptyList())\n    .collectAsState(initial = emptyList())\nPreferenceListMulti(\n    value = multiList1.value,\n    onValueChange = {\n        scope.launch(DispatcherIO) {\n            dataStore.update(\"multiList1\", it)\n        }\n    },\n    items = list,\n    itemTextProvider = { icons[it].name },\n    itemIconProvider = { Icon(icons[it], null) },\n    title = \"Multi List 1\",\n    subtitle = \"This preference allows you to select multiple items from a list\",\n    icon = { Icon(Icons.Default.Checklist, null) }\n)\n</code></pre>"},{"location":"modules/screen-list/#composable-single-selection-list","title":"Composable - Single Selection List","text":"Data as <code>MutableState</code>Data as <code>value</code> + <code>onValueChange</code> <pre><code>/**\n * A list preference item - this item provides a list dialog or a dropdown to change this preference\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param style the [PreferenceList.Style] of this item ([PreferenceList.Style.Dialog], [PreferenceList.Style.Spinner] or [PreferenceList.Style.SegmentedButtons])\n * @param value the [MutableState] of this item\n * @param items the list of items that this preference can select from\n * @param itemTextProvider a converter to get the text of an item\n * @param itemIconProvider a converter to provide an icon for an item\n * @param filter a lambda for filtering the list - if it is null, filtering is disabled (works with [PreferenceList.Style.Dialog] only!)\n */\n@Composable\nfun &lt;T&gt; PreferenceScope.PreferenceList(\n    style: PreferenceList.Style = PreferenceList.Style.Dialog(),\n    // listStyle\n    value: MutableState&lt;T&gt;,\n    items: List&lt;T&gt;,\n    itemTextProvider: @Composable (item: T) -&gt; String = { it.toString() },\n    itemIconProvider: (@Composable (item: T) -&gt; Unit)? = null,\n    filter: ((filter: String, item: T) -&gt; Boolean)? = null,\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceListDefaults.itemSetup(style),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    // Dialog\n    dialog: @Composable (state: DialogState) -&gt; Unit = { dialogState -&gt;\n        PreferenceListDefaults.dialog(\n            style,\n            dialogState,\n            value.value,\n            { value.value = it },\n            items,\n            itemTextProvider,\n            itemIconProvider,\n            title,\n            icon,\n            filter?.let {\n                DialogList.Filter(\n                    filter = it,\n                    keepSelectionForInvisibleItems = false\n                )\n            }\n        )\n    }\n)\n</code></pre> <pre><code>/**\n * A list preference item - this item provides a list dialog or a dropdown to change this preference\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param style the [PreferenceList.Style] of this item ([PreferenceList.Style.Dialog] or [PreferenceList.Style.Spinner])\n * @param value the value of this item\n * @param onValueChange the value changed callback of this item\n * @param items the list of items that this preference can select from\n * @param itemTextProvider a converter to get the text of an item\n * @param itemIconProvider a converter to provide an icon for an item\n */\n@Composable\nfun &lt;T&gt; PreferenceScope.PreferenceList(\n    style: PreferenceList.Style = PreferenceList.Style.Dialog(),\n    // Special\n    value: T,\n    onValueChange: (value: T) -&gt; Unit,\n    items: List&lt;T&gt;,\n    itemTextProvider: @Composable (item: T) -&gt; String = { it.toString() },\n    itemIconProvider: (@Composable (item: T) -&gt; Unit)? = null,\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceListDefaults.itemSetup(style),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    // Dialog\n    dialog: @Composable (state: DialogState) -&gt; Unit = { dialogState -&gt;\n        PreferenceListDefaults.dialog(\n            style,\n            dialogState,\n            value,\n            onValueChange,\n            items,\n            itemTextProvider,\n            itemIconProvider,\n            title,\n            icon\n        )\n    }\n)\n</code></pre>"},{"location":"modules/screen-list/#composable-multi-selection-list","title":"Composable - Multi Selection List","text":"Data as <code>MutableState</code>Data as <code>value</code> + <code>onValueChange</code> <pre><code>/**\n * A list preference item - this item provides a list dialog to change this preference\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param value the [MutableState] of this item\n * @param items the list of items that this preference can select from\n * @param itemTextProvider a converter to get the text of an item\n * @param itemIconProvider a converter to provide an icon for an item\n */\n@Composable\nfun &lt;T&gt; PreferenceScope.PreferenceListMulti(\n    // listStyle\n    value: MutableState&lt;List&lt;T&gt;&gt;,\n    items: List&lt;T&gt;,\n    itemTextProvider: @Composable (item: T) -&gt; String = { it.toString() },\n    itemIconProvider: (@Composable (item: T) -&gt; Unit)? = null,\n    formatter: @Composable (selected: List&lt;T&gt;) -&gt; String = { selected -&gt;\n        selected.map {\n            itemTextProvider(it)\n        }.joinToString(\";\")\n    },\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceMultiListDefaults.itemSetup(),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    // Dialog\n    dialog: @Composable (state: DialogState) -&gt; Unit = { dialogState -&gt;\n        PreferenceMultiListDefaults.dialog(dialogState, value.value, { value.value = it }, items, itemTextProvider, itemIconProvider, title, icon)\n    }\n)\n</code></pre> <pre><code>/**\n * A list preference item - this item provides a list dialog to change this preference\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param value the value of this item\n * @param onValueChange the value changed callback of this item\n * @param items the list of items that this preference can select from\n * @param itemTextProvider a converter to get the text of an item\n * @param itemIconProvider a converter to provide an icon for an item\n */\n@Composable\nfun &lt;T&gt; PreferenceScope.PreferenceListMulti(\n    // Special\n    value: List&lt;T&gt;,\n    onValueChange: (value: List&lt;T&gt;) -&gt; Unit,\n    items: List&lt;T&gt;,\n    itemTextProvider: @Composable (item: T) -&gt; String = { it.toString() },\n    itemIconProvider: (@Composable (item: T) -&gt; Unit)? = null,\n    formatter: @Composable (selected: List&lt;T&gt;) -&gt; String = { selected -&gt;\n        selected.map {\n            itemTextProvider(it)\n        }.joinToString(\";\")\n    },\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceMultiListDefaults.itemSetup(),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    // Dialog\n    dialog: @Composable (state: DialogState) -&gt; Unit = { dialogState -&gt;\n        PreferenceMultiListDefaults.dialog(dialogState, value, onValueChange, items, itemTextProvider, itemIconProvider, title, icon)\n    }\n)\n</code></pre>"},{"location":"modules/screen-list/#screenshots","title":"Screenshots","text":""},{"location":"modules/screen-number/","title":"screen-number","text":"<p>This shows a simple number picker preference.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p>"},{"location":"modules/screen-number/#example","title":"Example","text":"<pre><code>val number1 = dataStore.getInt(\"number1\", 50)\n    .collectAsState(initial = 50)\nPreferenceNumber(\n    value = number1.value,\n    onValueChange = {\n        scope.launch(DispatcherIO) {\n            dataStore.update(\"number1\", it)\n        }\n    },\n    min = 0,\n    max = 100,\n    stepSize = 1,\n    title = \"Number 1\",\n    subtitle = \"Select a number in the range [0, 100]\",\n    icon = { Icon(Icons.Default.Numbers, null) }\n)\n</code></pre>"},{"location":"modules/screen-number/#composable","title":"Composable","text":"Data as <code>MutableState</code>Data as <code>value</code> + <code>onValueChange</code> <pre><code>/**\n * A number preference item - this item provides a number **picker** dialog to change this preference\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param value the [MutableState] of this item\n * @param min the minimum valid number\n * @param max the maximum valid number\n * @param stepSize the steps in which a number can be picked\n * @param formatter a formatter for a number\n */\n@Composable\nfun &lt;T : Number&gt; PreferenceScope.PreferenceNumber(\n    style: PreferenceNumber.Style = PreferenceNumber.Style.Picker,\n    // Special\n    value: MutableState&lt;T&gt;,\n    min: T,\n    max: T,\n    stepSize: T,\n    formatter: (value: T) -&gt; String = { it.toString() },\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceNumberDefaults.itemSetup(style),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    // Dialog\n    dialog: @Composable (state: DialogState) -&gt; Unit = { dialogState -&gt;\n        PreferenceNumberDefaults.dialog(\n            dialogState,\n            value.value,\n            { value.value = it },\n            min,\n            max,\n            stepSize,\n            formatter,\n            title,\n            icon\n        )\n    }\n)\n</code></pre> <pre><code>/**\n * A number preference item - this item provides a number **picker** dialog to change this preference\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param value the value of this item\n * @param onValueChange the value changed callback of this item\n * @param min the minimum valid number\n * @param max the maximum valid number\n * @param stepSize the steps in which a number can be picked\n * @param formatter a formatter for a number\n */\n@Composable\nfun &lt;T : Number&gt; PreferenceScope.PreferenceNumber(\n    style: PreferenceNumber.Style = PreferenceNumber.Style.Picker,\n    // Special\n    value: T,\n    onValueChange: (value: T) -&gt; Unit,\n    min: T,\n    max: T,\n    stepSize: T,\n    formatter: (value: T) -&gt; String = { it.toString() },\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceNumberDefaults.itemSetup(style),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    // Dialog\n    dialog: @Composable (state: DialogState) -&gt; Unit = { dialogState -&gt;\n        PreferenceNumberDefaults.dialog(\n            dialogState,\n            value,\n            onValueChange,\n            min,\n            max,\n            stepSize,\n            formatter,\n            title,\n            icon\n        )\n    }\n)\n</code></pre>"},{"location":"modules/screen-number/#screenshots","title":"Screenshots","text":""},{"location":"modules/screen-time/","title":"screen-time","text":"<p>This shows a simple timeean preference. It allows to toggle a timeean value.</p> <p>Check out the composable and it's documentation in the code snipplet below.</p>"},{"location":"modules/screen-time/#example","title":"Example","text":"<pre><code>val now = DateTimeUtil.now().time\nval time1 = dataStore.getInt(\"time1\", now.toSecondOfDay())\n    .collectAsState(initial = now.toSecondOfDay())\nPreferenceTime(\n    value = time1.value.let {\n        LocalTime.fromSecondOfDay(it)\n    },\n    onValueChange = {\n        scope.launch(DispatcherIO) {\n            dataStore.update(\"time1\", it.toSecondOfDay())\n        }\n    },\n    title = \"Time 1\",\n    icon = { Icon(Icons.Default.AccessTime, null) }\n)\n</code></pre>"},{"location":"modules/screen-time/#composable","title":"Composable","text":"Data as <code>MutableState</code>Data as <code>value</code> + <code>onValueChange</code> <pre><code>/**\n * A color preference item - this item provides a time picker dialog to change this preference\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param value the [MutableState] of this item\n * @param is24Hours if true, the time picker shows a picker in 24h mode, otherwise it will use the 12h mode\n * @param formatter the formatter to format the time\n */\n@Composable\nfun PreferenceScope.PreferenceTime(\n    // Special\n    value: MutableState&lt;LocalTime&gt;,\n    is24Hours: Boolean = is24HourFormat(), // comes from ComposeDialog\n    formatter: (time: LocalTime) -&gt; String = getDefaultTimeFormatter(is24Hours),\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceTimeDefaults.itemSetup(),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    // Dialog\n    dialog: @Composable (state: DialogState) -&gt; Unit = { dialogState -&gt;\n        PreferenceTimeDefaults.dialog(dialogState, value.value, { value.value = it }, is24Hours, title, icon)\n    }\n)\n</code></pre> <pre><code>/**\n * A color preference item - this item provides a time picker dialog to change this preference\n *\n * &amp;nbsp;\n *\n * **Basic Parameters:** all params not described here are derived from [com.michaelflisar.composepreferences.core.composables.BasePreference], check it out for more details\n *\n * @param value the value of this item\n * @param onValueChange the value changed callback of this item\n * @param is24Hours if true, the time picker shows a picker in 24h mode, otherwise it will use the 12h mode\n * @param formatter the formatter to format the time\n */\n@Composable\nfun PreferenceScope.PreferenceTime(\n    // Special\n    value: LocalTime,\n    onValueChange: (value: LocalTime) -&gt; Unit,\n    is24Hours: Boolean = is24HourFormat(), // comes from ComposeDialog\n    formatter: (time: LocalTime) -&gt; String = getDefaultTimeFormatter(is24Hours),\n    // Base Preference\n    title: String,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: String? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    itemStyle: PreferenceItemStyle = LocalPreferenceSettings.current.style.defaultItemStyle,\n    itemSetup: PreferenceItemSetup = PreferenceTimeDefaults.itemSetup(),\n    titleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    subtitleRenderer: @Composable (text: AnnotatedString) -&gt; Unit = { Text(it) },\n    filterTags: List&lt;String&gt; = emptyList(),\n    // Dialog\n    dialog: @Composable (state: DialogState) -&gt; Unit = { dialogState -&gt;\n        PreferenceTimeDefaults.dialog(dialogState, value, onValueChange, is24Hours, title, icon)\n    }\n)\n</code></pre>"},{"location":"modules/screen-time/#screenshots","title":"Screenshots","text":""}]}